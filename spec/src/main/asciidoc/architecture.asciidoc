//
// Copyright (c) 2016-2019 Eclipse ConfigJSR Contributors:
// Mark Struberg
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[architecture]]
== Architecture

This specification defines an easy to use and flexible system for application configuration.
It also defines ways to extend the configuration mechanism itself via a SPI (Service Provider Interface) in a portable fashion.

=== Rationale

Released binaries often contain functionality which needs to behave slightly differently depending on the deployment.
This might be the port numbers and URLs of REST endpoints to talk to (e.g. depending on the customer for whom a WAR is deployed).
Or it might even be whole features which need to be switched on and off depending on the installation.
All this must be possible without the need to re-package the whole application binary.

The Configuration for Java API specification (or short: JavaConfig) provides a way to achieve this goal by aggregating configuration from many different <<configsource,ConfigSources>> and presenting a single merged view to the user - a `Config` instance.
This allows the application to bundle default configuration within the application.
It also allows to override the defaults from outside, e.g. via an environment variable, a Java system property or via a container like Docker or Kubernetes.
JavaConfig also allows to implement and register own configuration sources in a portable way, e.g. for reading configuration values from a shared database in an application cluster.


Internally, the core JavaConfig mechanism is purely String/String based.
Type-safety is intentionally only provided on top of that by using the proper <<Converter,Converters>> before handing the value out to the caller.

The configuration key might use dot-separated blocks to prevent name conflicts. This is similar to Java package namespacing:

[source, text]
----
com.acme.myproject.someserver.url=http://some.server/some/endpoint
com.acme.myproject.someserver.port=9085
com.acme.myproject.someserver.active=true
com.acme.other.stuff.name=Karl
com.acme.myproject.notify.onerror=karl@mycompany,sue@mcompany
some.library.own.config=some value
----


TIP: while the above example is in the Java property file syntax the actual content could also e.g. be read from a database.

