//
// Copyright (c) 2016-2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Mark Struberg
// Emily Jiang
// John D. Ament

[[converter]]
== Converter

For providing typesafe configuration we need to convert from the configured Strings into target types.
This happens by providing `Converter` s in the `Config`.

Each `Converter` can define a priority.
The `Config` will use the `Converter` with the highest `Priority` for each target type.

=== Built-in Converters

The following `Converter` s are provided by JavaConfig by default:

* `boolean` and `Boolean`, values for `true` are (case insensitive) `true`, `1`, `YES`, `Y` and `ON`.
  Any other value will be interpreted as `false`
* `int` and `Integer`
* `long` and `Long`
* `float` and `Float`, a dot '.' is used to separate the fractional digits. A syntax with an explicit exponent is not supported.
* `double` and `Double`, a dot '.' is used to separate the fractional digits. A syntax with an explicit exponent is not supported.
* `URL` as defined by `java.net.URL#URL(java.lang.String)`

All built-in `Converter` have the priority of `1`.

=== Adding custom Converters

A custom `Converter` must implement the generic interface `javax.config.spi.Converter`.
The Type parameter of the interface is the target type the String is converted to.
You have to register your implementation in a file `/META-INF/services/javax.config.spi.Converter` with the fully qualified class name of the custom implementation.

A custom `Converter` can define a priority with the `@javax.annotation.Priority` annotation.
If a Priority annotation isn't applied, a default priority of 100 is assumed.

A custom `Converter` for a target type of any of the built-in Converters will overwrite the default Converter.

Converters can be added to the `ConfigBuilder` programmatically via `ConfigBuilder#withConverters(Converter<?>... converters)`
where the type of the converters can be obtained via reflection. However, this is not possible for a lambda converter.
In this case, use the method `ConfigBuilder#withConverter(Class<T> type, int priority, Converter<T> converter)`.

=== Implicit Converters

If no built-in nor custom `Converter` for a requested Type `T`, an implicit Converter is automatically provided if the following conditions are met:

* The target type `T` has a Constructor with a String parameter, or
* the target type `T` has a Constructor with a CharSequence parameter, or
* the target type `T` has a `static T valueOf(String)` method, or
* the target type `T` has a `static T valueOf(CharSequence)` method, or
* the target type `T` has a `static T parse(String)` method, or
* the target type `T` has a `static T parse(CharSequence)` method, or

The lookup will be done in the order of the above list.

Note that every `java.time` type has a `parse(CharSequence)` method and every enum has a generated 'valueOf(String)' method.
They are thus all covered by an implicit converter!

If an Implicit Converter cannot convert a value, a `java.lang.IllegalArgumentException` is to be thrown.

=== Array Converters

For the built-in converters and custom converters, the corresponding Array converters are provided by default.
The delimiter for the config value is comma (`,` U+002C).
The escape character is backslash (`\` U+005C).
e.g. With this config `myPets=dog,cat,dog\,cat`, the values as an array will be `{"dog", "cat", "dog,cat"}`.

==== Programmatic lookup

Array as a class type is supported in the programmatic lookup.

[source, java]
----
Config = ConfigProvider.getConfig();
String[] myPets = config.getValue("myPets", String[].class);
----

myPets will be "dog", "cat", "dog,cat" as an array

==== Injection model

For the property injection Array, List and Set are supported.

[source, java]
----
@Inject @ConfigProperty(name="myPets") String[] myPetsArray;
@Inject @ConfigProperty(name="myPets") List<String> myPetsList;
@Inject @ConfigProperty(name="myPets") Set<String> myPetsSet;
----

myPets will be "dog", "cat", "dog,cat" as an array, List or Set.

=== Cleaning up a Converter

If a `Converter` implements the `java.lang.AutoCloseable` interface then the `close()` method will be called when the underlying `Config` is being released.


<<<
